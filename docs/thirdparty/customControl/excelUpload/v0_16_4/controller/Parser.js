"use strict";sap.ui.define(["../types","./Util"],function(e,r){function t(e){return e&&e.__esModule&&typeof e.default!=="undefined"?e.default:e}const a=e["ErrorTypes"];const i=t(r);class s{static parseExcelData(e,r,t,a,s){const n=[];for(const[o,l]of e.entries()){let e={};for(const[n,c]of Object.entries(r)){const r=i.getValueFromRow(l,c.label,n,t.getFieldMatchType());if(r){if(c.type==="Edm.Boolean"){if(typeof r==="boolean"||r==="true"||r==="false"){e[n]=`${r||""}`}else{this.addParsingError("valueNotABoolean",s,a,o,[c.label])}}else if(c.type==="Edm.Date"){try{const t=new Date(Math.round((r-25569)*86400*1e3));this.checkDate(t,c,s,a,o);const i=`${t.getFullYear()}-${("0"+(t.getMonth()+1)).slice(-2)}-${("0"+t.getDate()).slice(-2)}`;e[n]=i}catch(e){this.addParsingError("errorWhileParsing",s,a,o,[c.label])}}else if(c.type==="Edm.DateTimeOffset"||c.type==="Edm.DateTime"){try{const t=new Date(Math.round((r-25569)*86400*1e3));this.checkDate(t,c,s,a,o);e[n]=t}catch(e){this.addParsingError("errorWhileParsing",s,a,o,[c.label])}}else if(c.type==="Edm.TimeOfDay"||c.type==="Edm.Time"){try{if(r>1){this.addParsingError("invalidTime",s,a,o,[c.label])}else{const t=24*60*60;const i=r*t;const l=new Date(i*1e3);this.checkDate(l,c,s,a,o);const d=new Date(i*1e3).toISOString().substring(11,16);e[n]=d}}catch(e){this.addParsingError("errorWhileParsing",s,a,o,[c.label])}}else if(c.type==="Edm.Int32"){try{const t=this.checkInteger(r,c,s,a,o);e[n]=t}catch(e){this.addParsingError("errorWhileParsing",s,a,o,[c.label])}}else if(c.type==="Edm.Double"){try{const t=this.checkDouble(r,c,s,a,o);e[n]=t}catch(e){this.addParsingError("errorWhileParsing",s,a,o,[c.label])}}else{e[n]=`${r||""}`}}}n.push(e)}return n}static checkDate(e,r,t,a,i){if(isNaN(e.getTime())){this.addParsingError("invalidDate",t,a,i,[r.label])}}static checkDouble(e,r,t,a,i){let s=e;if(typeof e==="string"){const n=e;if(/[^0-9.,]/.test(s)){this.addParsingError("parsingErrorNotNumber",t,a,i,[r.label])}const o=n.replace(",",".");s=parseFloat(o);if(parseFloat(o).toString()!==o){this.addParsingError("parsingErrorNotSameNumber",t,a,i,[r.label])}}return s}static checkInteger(e,r,t,a,i){let s=e;if(!Number.isInteger(s)){const n=e;if(typeof e==="string"){if(/[^0-9]/.test(s)){this.addParsingError("parsingErrorNotFullNumber",t,a,i,[r.label])}}s=parseInt(n);if(parseInt(n).toString()!==n.toString()){this.addParsingError("parsingErrorNotSameNumber",t,a,i,[r.label])}}return s}static addParsingError(e,r,t,i,s){t.addParsingError({title:r.geti18nText(e,s),row:i+2,type:a.ParsingError,counter:1})}}return s});
//# sourceMappingURL=Parser.js.map